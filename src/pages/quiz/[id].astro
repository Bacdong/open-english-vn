---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';

export const getStaticPaths = async () => {
  const quizzes = await getCollection('quiz');
  return quizzes.map((quiz) => ({
    params: { id: quiz.id },
  }));
};
const base = import.meta.env.BASE_URL;

const { id } = Astro.params;
const quizzes = await getCollection('quiz');
const quiz = quizzes.find(q => q.id === id);

if (!quiz) {
  throw new Error(`Quiz not found: ${id}`);
}

const quizJson = JSON.stringify(quiz.data.questions);
---

<Layout>
  <main class="min-h-screen bg-gray-50 dark:bg-gray-900 py-8 px-4 sm:px-6 lg:px-8">
    <div class="max-w-3xl mx-auto">
      <a href={`${base}/quiz`} class="inline-flex items-center mb-6 text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 transition-colors duration-200">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
        </svg>
        Back to Quiz List
      </a>

      <div class="text-center mb-8">
        <h1 class="text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-2">{quiz.data.title}</h1>
        <p class="text-lg text-gray-600 dark:text-gray-300 max-w-2xl mx-auto">{quiz.data.description || "Test your knowledge!"}</p>
      </div>

      <div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden"
           x-data="quizComponent({questions: JSON.parse($el.dataset.quiz)})"
           data-quiz={quizJson}>

        <!-- Progress indicator -->
        <div class="px-6 pt-6 pb-4">
          <div class="flex items-center justify-between mb-2">
            <span class="text-sm font-medium text-gray-700 dark:text-gray-300" x-text="`Question ${currentQuestion + 1} of ${questions.length}`"></span>
            <span class="text-sm font-medium text-blue-600 dark:text-blue-400" x-text="`${Math.round(((currentQuestion + 1)/questions.length)*100)}%`"></span>
          </div>
          <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2.5">
            <div class="bg-blue-600 dark:bg-blue-500 h-2.5 rounded-full" 
                 :style="`width: ${((currentQuestion + 1)/questions.length)*100}%`"></div>
          </div>
        </div>

        <!-- Result message (shown after submission) -->
        <template x-if="showResults">
          <div class="px-6 pt-4">
            <div x-show="score === questions.length" 
                 class="bg-green-50 dark:bg-green-900 border border-green-200 dark:border-green-800 text-green-800 dark:text-green-200 px-4 py-3 rounded-lg mb-4 flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
              </svg>
              <span class="font-semibold">Perfect! üéâ You got all answers correct!</span>
            </div>
            <div x-show="score >= questions.length * 0.7 && score < questions.length" 
                 class="bg-blue-50 dark:bg-blue-900 border border-blue-200 dark:border-blue-800 text-blue-800 dark:text-blue-200 px-4 py-3 rounded-lg mb-4 flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <span class="font-semibold">Great job! üëç You're doing well!</span>
            </div>
            <div x-show="score < questions.length * 0.7 && score !== null" 
                 class="bg-yellow-50 dark:bg-yellow-900 border border-yellow-200 dark:border-yellow-800 text-yellow-800 dark:text-yellow-200 px-4 py-3 rounded-lg mb-4 flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
              </svg>
              <span class="font-semibold">Good try! üí™ Review the answers and try again!</span>
            </div>
          </div>
        </template>

        <div class="p-6 space-y-6">
          <template x-for="(q, index) in questions" :key="index">
            <div class="border border-gray-200 dark:border-gray-700 p-5 rounded-lg transition-all duration-200 hover:shadow-sm"
                 :class="{'ring-2 ring-blue-500': currentQuestion === index}">
              <p class="font-semibold text-lg mb-4 text-gray-800 dark:text-gray-100" x-text="`${index + 1}. ${q.question}`"></p>
              
              <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
                <template x-for="(option, optionIndex) in q.options" :key="optionIndex">
                  <button
                    class="p-4 text-left w-full rounded-lg transition-all duration-200 border"
                    :class="{
                      'bg-green-100 border-green-300 dark:bg-green-900 dark:border-green-700': showResults && option === q.answer,
                      'bg-blue-100 border-blue-300 dark:bg-blue-900 dark:border-blue-700': selectedAnswers[index] === option && !showResults,
                      'bg-red-100 border-red-300 dark:bg-red-900 dark:border-red-700': showResults && selectedAnswers[index] === option && selectedAnswers[index] !== q.answer,
                      'bg-gray-50 border-gray-200 dark:bg-gray-700 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-600': !selectedAnswers[index] || (selectedAnswers[index] !== option && !showResults)
                    }"
                    @click="handleAnswerSelect(index, option)"
                    x-text="option"
                    :disabled="showResults"
                  >
                  </button>
                </template>
              </div>
              
              <!-- Explanation (shown after submission) -->
              <div x-show="showResults && q.explanation" class="mt-4 p-3 bg-gray-50 dark:bg-gray-700 rounded-lg text-sm text-gray-700 dark:text-gray-300">
                <span class="font-medium">Explanation:</span> <span x-text="q.explanation"></span>
              </div>
            </div>
          </template>
        </div>

        <div class="px-6 pb-6 flex flex-col sm:flex-row justify-between items-center gap-4 border-t border-gray-200 dark:border-gray-700 pt-6">
          <div x-show="score !== null" class="text-lg font-semibold text-gray-800 dark:text-gray-200">
            Score: <span x-text="score" class="text-blue-600 dark:text-blue-400"></span>/<span x-text="questions.length"></span>
            (<span x-text="Math.round((score/questions.length)*100)"></span>%)
          </div>
          
          <div class="flex gap-3 w-full sm:w-auto">
            <button 
              x-show="!showResults && currentQuestion > 0"
              @click="currentQuestion--"
              class="px-4 py-3 bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-200 font-medium rounded-lg transition-all duration-300"
            >
              Previous
            </button>
            
            <button 
              x-show="!showResults && currentQuestion < questions.length - 1"
              @click="currentQuestion++"
              class="px-4 py-3 bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-200 font-medium rounded-lg transition-all duration-300"
            >
              Next
            </button>
            
            <button 
              class="px-6 py-3 bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white font-medium rounded-lg shadow hover:shadow-md transition-all duration-300"
              @click="handleSubmit"
              x-text="score === null ? 'Submit Quiz' : 'Try Again'"
            >
            </button>
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
document.addEventListener("alpine:init", () => {
  Alpine.data("quizComponent", ({ questions }) => ({
    questions,
    selectedAnswers: Array(questions.length).fill(null),
    score: null,
    showResults: false,
    currentQuestion: 0,

    handleAnswerSelect(index, option) {
      this.selectedAnswers[index] = option;
      this.currentQuestion = index;
    },

    handleSubmit() {
      if (this.score === null) {
        // Calculate score
        let correct = 0;
        this.selectedAnswers.forEach((answer, index) => {
          if (answer === this.questions[index].answer) {
            correct++;
          }
        });
        this.score = correct;
        this.showResults = true;
        
        // Scroll to top to see results
        window.scrollTo({ top: 0, behavior: 'smooth' });
        
        // Celebrate if perfect score
        if (this.score === this.questions.length) {
          this.celebrate();
        }
      } else {
        // Reset quiz
        this.selectedAnswers = Array(this.questions.length).fill(null);
        this.score = null;
        this.showResults = false;
        this.currentQuestion = 0;
      }
    },
    
    celebrate() {
      // Simple celebration effect
      const duration = 2000;
      const end = Date.now() + duration;
      const colors = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444'];
      
      const frame = () => {
        if (Date.now() > end) return;
        
        confetti({
          particleCount: 2,
          angle: 60,
          spread: 55,
          origin: { x: 0 },
          colors: colors
        });
        
        confetti({
          particleCount: 2,
          angle: 120,
          spread: 55,
          origin: { x: 1 },
          colors: colors
        });
        
        requestAnimationFrame(frame);
      };
      
      frame();
    }
  }));
})
</script>

<script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x/dist/cdn.min.js" defer></script>
<script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.5.1/dist/confetti.browser.min.js"></script>